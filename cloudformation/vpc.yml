---
AWSTemplateFormatVersion: 2010-09-09
Description: >
  VPC with public/private subnets spanning 2 or 3 AZs and setup of AWS FlowLogs and VPC Endpoints

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Template Version
        Parameters:
          - pTemplateVersion
      - Label:
          default: VPC Config
        Parameters:
          - pVPCName
          - pVPCCidr
          - pVPCTenancy
          - pNumberOfAzs
          - pEnableFlowLogs
      - Label:
          default: Subnet Configurations
        Parameters:
          - pDeployRdsSubnet
          - pDeployRedShiftClusterSubnet
      - Label:
          default: Optional VPC Endpoint Configs
        Parameters:
          - pDeployS3Endpoint
          - pDeployDynamodbEndpoint
          - pDeployApiGatewayEndpoint
          - pDeployAuroraRdsEndpoint
          - pDeployAwsBackupEndpoints
          - pDeployCloudWatchLogsEndpoint
          - pDeployDataSyncEndpoint
          - pDeployEc2ImageBuilderEndpoint
          - pDeployECREndpoints
          - pDeployEcsEndpoints
          - pDeployEksEndpoints
          - pDeploySecretsManagerEndpoint
          - pDeploySesEndpoint
          - pDeploySftpTransferEndpoints
          - pDeploySnsEndpoint
          - pDeploySqsEndpoint
          - pDeploySsmEndpoints
          - pDeployStsEndpoint

      - Label:
          default: Tagging
        Parameters:
          - pEnvironment
    ParameterLabels:
      pVPCName:
        default: Name of VPC
      pVPCCidr:
        default: VPC CIDR Block
      pVPCTenancy:
        default: Instance Tenancy
      pEnvironment:
        default: Environment
      pTemplateVersion:
        default: CloudFormation Template Version
      pNumberOfAzs:
        default: Number of AZs to use
      pDeployS3Endpoint:
        default: S3 Endpoint
      pDeployDynamodbEndpoint:
        default: Dynamodb Endpoint
      pDeploySecretsManagerEndpoint:
        default: Secrets Endpoint
      pDeployECREndpoints:
        default: ECR Endpoints
      pDeployEcsEndpoints:
        default: ECS Endpints
      pDeployEksEndpoints:
        default: EKS Endpoint
      pDeploySsmEndpoints:
        default: SSM Endpoints
      pDeployCloudWatchLogsEndpoint:
        default: CloudWatch Logs Endpoint
      pDeployStsEndpoint:
        default: STS Endpoint
      pDeploySesEndpoint:
        default: SES Endpoint
      pDeploySnsEndpoint:
        default: SNS Endpoint
      pDeploySqsEndpoint:
        default: SQS Endpoint
      pDeploySftpTransferEndpoints:
        default: SFTP Transfer Endpoints
      pDeployAwsBackupEndpoints:
        default: AWS Backup Endpoints
      pDeployAuroraRdsEndpoint:
        default: Aurorad RDS Endpoint
      pDeployEc2ImageBuilderEndpoint:
        default: EC2 Imaege Builder Endpoint
      pDeployDataSyncEndpoint:
        default: Data Sync Endpoint
      pDeployApiGatewayEndpoint:
        default: API Gateway Endpoint
      pDeployRdsSubnet:
        default: Deploy RDS Subnets
      pDeployRedShiftClusterSubnet:
        defauly: Deploy RedShift Cluster Subnets
      pEnableFlowLogs:
        default: Enable VPC Flow Logs

Parameters:

  pVPCCidr:
    Default: 10.10.0.0/16
    Description: CIDR block for VPC. Example 10.0.0.0/16
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  pVPCName:
    Description: VPC name used for reference
    Type: String

  pVPCTenancy:
    AllowedValues:
      - default
      - dedicated
    Default: default
    Description: Instance tenancy behavior for this VPC
    Type: String

  pEnvironment:
    Type: String
    Description: value for tag Environment. Values can be Production, Development, QA, or Staging
    AllowedValues:
      - "Production"
      - "Development"
      - "QA"
      - "Staging"
      - "Management"

  ## Template Version does not change unless developers
  ## update the git repo. The parameter below is not to
  ## changed by the end user when launching template
  pTemplateVersion:
    Type: String
    Default: "2.0.0"
    AllowedValues:
      - "2.0.0"
    ConstraintDescription: Do not change

  pNumberOfAzs:
    Type: String
    Description: The number of AZs to use. A public and private subnet will be deployed to each AZ
    Default: "3"
    AllowedValues:
      - "2"
      - "3"

  pDeployS3Endpoint:
    Description: Option to deploy S3 endpoint for VPC.
    Type: String
    Default: "Yes"
    AllowedValues:
      - "Yes"
      - "No"
  pDeployDynamodbEndpoint:
    Description: Option to deploy DynamoDB endpoint.
    Type: String
    Default: "Yes"
    AllowedValues:
      - "Yes"
      - "No"
  pDeployApiGatewayEndpoint:
    Type: String
    Default: "No"
    AllowedValues:
      - "Yes"
      - "No"
  pDeployAuroraRdsEndpoint:
    Type: String
    Default: "No"
    AllowedValues:
      - "Yes"
      - "No"
  pDeployAwsBackupEndpoints:
    Type: String
    Default: "No"
    AllowedValues:
      - "Yes"
      - "No"
  pDeployCloudWatchLogsEndpoint:
    Type: String
    Default: "No"
    AllowedValues:
      - "Yes"
      - "No"
  pDeployDataSyncEndpoint:
    Type: String
    Default: "No"
    AllowedValues:
      - "Yes"
      - "No"
  pDeployEc2ImageBuilderEndpoint:
    Type: String
    Default: "No"
    AllowedValues:
      - "Yes"
      - "No"
  pDeployECREndpoints:
    Type: String
    Default: "No"
    AllowedValues:
      - "Yes"
      - "No"
  pDeployEcsEndpoints:
    Type: String
    Default: "No"
    AllowedValues:
      - "Yes"
      - "No"
  pDeployEksEndpoints:
    Type: String
    Default: "No"
    AllowedValues:
      - "Yes"
      - "No"
  pDeploySecretsManagerEndpoint:
    Type: String
    Default: "No"
    AllowedValues:
      - "Yes"
      - "No"
  pDeploySesEndpoint:
    Type: String
    Default: "No"
    AllowedValues:
      - "Yes"
      - "No"
  pDeploySftpTransferEndpoints:
    Type: String
    Default: "No"
    AllowedValues:
      - "Yes"
      - "No"
  pDeploySnsEndpoint:
    Type: String
    Default: "No"
    AllowedValues:
      - "Yes"
      - "No"
  pDeploySqsEndpoint:
    Type: String
    Default: "No"
    AllowedValues:
      - "Yes"
      - "No"
  pDeploySsmEndpoints:
    Type: String
    Default: "No"
    AllowedValues:
      - "Yes"
      - "No"
  pDeployStsEndpoint:
    Type: String
    Default: "No"
    AllowedValues:
      - "Yes"
      - "No"

  pDeployRdsSubnet:
    Type: String
    Default: "Yes"
    AllowedValues:
      - "Yes"
      - "No"

  pDeployRedShiftClusterSubnet:
    Type: String
    Default: "No"
    AllowedValues:
      - "Yes"
      - "No"

  pEnableFlowLogs:
    Type: String
    Default: "No"
    AllowedValues:
      - "Yes"
      - "No"

Conditions:
  3AZDeployment: !Equals [!Ref pNumberOfAzs, "3"]
  cDeployS3Endpoint: !Equals [!Ref pDeployS3Endpoint, "Yes"]
  cDeployDynamodbEndpoint: !Equals [!Ref pDeployDynamodbEndpoint, "Yes"]
  cDeployApiGatewayEndpoint: !Equals [!Ref pDeployApiGatewayEndpoint, "Yes"]
  cDeployAuroraRdsEndpoint: !Equals [!Ref pDeployAuroraRdsEndpoint, "Yes"]
  cDeployAwsBackupEndpoints: !Equals [!Ref pDeployAwsBackupEndpoints, "Yes"]
  cDeployCloudWatchLogsEndpoint: !Equals [!Ref pDeployCloudWatchLogsEndpoint, "Yes"]
  cDeployDataSyncEndpoint: !Equals [!Ref pDeployDataSyncEndpoint, "Yes"]
  cDeployEc2ImageBuilderEndpoint: !Equals [!Ref pDeployEc2ImageBuilderEndpoint, "Yes"]
  cDeployECREndpoints: !Equals [!Ref pDeployECREndpoints, "Yes"]
  cDeployEcsEndpoints: !Equals [!Ref pDeployEcsEndpoints, "Yes"]
  cDeployEksEndpoints: !Equals [!Ref pDeployEksEndpoints, "Yes"]
  cDeploySecretsManagerEndpoint: !Equals [!Ref pDeploySecretsManagerEndpoint, "Yes"]
  cDeploySesEndpoint: !Equals [!Ref pDeploySesEndpoint, "Yes"]
  cDeploySftpTransferEndpoints: !Equals [!Ref pDeploySftpTransferEndpoints, "Yes"]
  cDeploySnsEndpoint: !Equals [!Ref pDeploySnsEndpoint, "Yes"]
  cDeploySqsEndpoint: !Equals [!Ref pDeploySqsEndpoint, "Yes"]
  cDeploySsmEndpoints: !Equals [!Ref pDeploySsmEndpoints, "Yes"]
  cDeployStsEndpoint: !Equals [!Ref pDeployStsEndpoint, "Yes"]
  cDeployRdsSubnet: !Equals [!Ref pDeployRdsSubnet, "Yes"]
  cDeployRedShiftClusterSubnet: !Equals [!Ref pDeployRedShiftClusterSubnet, "Yes"]
  cEnableFlowLogs: !Equals [!Ref pEnableFlowLogs, "Yes"]


Resources:
  rEIPA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  rEIPB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  rEIPC:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  rFlowLogVPC:
    Type: AWS::EC2::FlowLog
    DependsOn: rLogGroupFlowLogs
    Condition: cEnableFlowLogs
    Properties:
      DeliverLogsPermissionArn: !GetAtt rRoleVPCFlowLogs.Arn
      LogGroupName: !Sub "${pVPCName}-FlowLogs"
      ResourceId: !Ref rVPC
      ResourceType: VPC
      TrafficType: ALL

  rInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${pVPCName} - vpc-igw"
        - Key: Environment
          Value: !Ref pEnvironment
        - Key: "Template Version"
          Value: !Ref pTemplateVersion

  rLogGroupFlowLogs:
    Type: AWS::Logs::LogGroup
    Condition: cEnableFlowLogs
    DeletionPolicy: 'Retain'
    UpdateReplacePolicy: 'Retain'
    Properties:
      LogGroupName: !Sub "${pVPCName}-FlowLogs"
      RetentionInDays: 90

  rLogStreamVPCFlowLogs:
    Type: AWS::Logs::LogStream
    Condition: cEnableFlowLogs
    DependsOn: rLogGroupFlowLogs
    Properties:
      LogGroupName: !Sub "${pVPCName}-FlowLogs"

  rNatGatewaySubnetA:
    Type: AWS::EC2::NatGateway
    DependsOn: rInternetGateway
    Properties:
      AllocationId: !GetAtt rEIPA.AllocationId
      SubnetId: !Ref rSubnetDMZA

  rNatGatewaySubnetB:
    Type: AWS::EC2::NatGateway
    DependsOn: rInternetGateway
    Properties:
      AllocationId: !GetAtt rEIPB.AllocationId
      SubnetId: !Ref rSubnetDMZB

  rNatGatewaySubnetC:
    Type: AWS::EC2::NatGateway
    Condition: 3AZDeployment
    DependsOn: rInternetGateway
    Properties:
      AllocationId: !GetAtt rEIPC.AllocationId
      SubnetId: !Ref rSubnetDMZC

  rRoleVPCFlowLogs:
    Type: AWS::IAM::Role
    #checkov:skip=CKV_AWS_111: "Ensure IAM policies does not allow write access without constraints"
    Condition: cEnableFlowLogs
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Sid: AllowFlowLogs
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Effect: Allow
                Resource: "*"
            Version: 2012-10-17
          PolicyName: cloudwatchlogsrole
      RoleName: !Sub "${pVPCName}-${AWS::Region}-RoleFlowLogs"
      Tags:
        - Key: Environment
          Value: !Ref pEnvironment
        - Key: VPC
          Value: !Ref pVPCName
        - Key: "Template Version"
          Value: !Ref pTemplateVersion

  rRoutePrivateNatGatewayA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref rNatGatewaySubnetA
      RouteTableId: !Ref rRouteTablePrivateA

  rRoutePrivateNatGatewayB:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref rNatGatewaySubnetB
      RouteTableId: !Ref rRouteTablePrivateB

  rRoutePrivateNatGatewayC:
    Type: AWS::EC2::Route
    Condition: 3AZDeployment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref rNatGatewaySubnetC
      RouteTableId: !Ref rRouteTablePrivateC

  rRouteTableDmz:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: DMZ Route
        - Key: Environment
          Value: !Ref pEnvironment

  rRouteTablePrivateA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub "${pVPCName} - Private Route A"
        - Key: Environment
          Value: !Ref pEnvironment
        - Key: "Template Version"
          Value: !Ref pTemplateVersion

  rRouteTablePrivateB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub "${pVPCName} - Private Route B"
        - Key: Environment
          Value: !Ref pEnvironment
        - Key: "Template Version"
          Value: !Ref pTemplateVersion

  rRouteTablePrivateC:
    Type: AWS::EC2::RouteTable
    Condition: 3AZDeployment
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub "${pVPCName} - Private Route C"
        - Key: Environment
          Value: !Ref pEnvironment
        - Key: "Template Version"
          Value: !Ref pTemplateVersion

  rRouteVPCIgw:
    Type: AWS::EC2::Route
    DependsOn: rVPCGatewayAttachmentInternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref rInternetGateway
      RouteTableId: !Ref rRouteTableDmz

  rSubnetDMZA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Select [0, !Cidr [!Ref pVPCCidr, 6, 13]]
      MapPublicIpOnLaunch: true
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub "${pVPCName} - DMZ Subnet A"
        - Key: Environment
          Value: !Ref pEnvironment
        - Key: "Template Version"
          Value: !Ref pTemplateVersion

  rSubnetDMZB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Select [1, !Cidr [!Ref pVPCCidr, 6, 13]]
      MapPublicIpOnLaunch: true
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub "${pVPCName} - DMZ Subnet B"
        - Key: Environment
          Value: !Ref pEnvironment
        - Key: "Template Version"
          Value: !Ref pTemplateVersion

  rSubnetDMZC:
    Type: AWS::EC2::Subnet
    Condition: 3AZDeployment
    Properties:
      AvailabilityZone: !Select [2, !GetAZs ""]
      CidrBlock: !Select [2, !Cidr [!Ref pVPCCidr, 6, 13]]
      MapPublicIpOnLaunch: true
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub "${pVPCName} - DMZ Subnet C"
        - Key: Environment
          Value: !Ref pEnvironment
        - Key: "Template Version"
          Value: !Ref pTemplateVersion

  rSubnetPrivateA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Select [3, !Cidr [!Ref pVPCCidr, 6, 13]]
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub "${pVPCName} - Private Subnet A"
        - Key: Environment
          Value: !Ref pEnvironment
        - Key: "Template Version"
          Value: !Ref pTemplateVersion

  rSubnetPrivateB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Select [4, !Cidr [!Ref pVPCCidr, 6, 13]]
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub "${pVPCName} - Private Subnet B"
        - Key: Environment
          Value: !Ref pEnvironment
        - Key: "Template Version"
          Value: !Ref pTemplateVersion

  rSubnetPrivateC:
    Type: AWS::EC2::Subnet
    Condition: 3AZDeployment
    Properties:
      AvailabilityZone: !Select [2, !GetAZs ""]
      CidrBlock: !Select [5, !Cidr [!Ref pVPCCidr, 6, 13]]
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub "${pVPCName} - Private Subnet C"
        - Key: Environment
          Value: !Ref pEnvironment
        - Key: "Template Version"
          Value: !Ref pTemplateVersion

  rSubnetRouteTableAssociationDMZA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rRouteTableDmz
      SubnetId: !Ref rSubnetDMZA

  rSubnetRouteTableAssociationDMZB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rRouteTableDmz
      SubnetId: !Ref rSubnetDMZB

  rSubnetRouteTableAssociationDMZC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: 3AZDeployment
    Properties:
      RouteTableId: !Ref rRouteTableDmz
      SubnetId: !Ref rSubnetDMZC

  rSubnetRouteTableAssociationPrivateA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rRouteTablePrivateA
      SubnetId: !Ref rSubnetPrivateA

  rSubnetRouteTableAssociationPrivateB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rRouteTablePrivateB
      SubnetId: !Ref rSubnetPrivateB

  rSubnetRouteTableAssociationPrivateC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: 3AZDeployment
    Properties:
      RouteTableId: !Ref rRouteTablePrivateC
      SubnetId: !Ref rSubnetPrivateC

  rVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref pVPCCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: !Ref pVPCTenancy
      Tags:
        - Key: Name
          Value: !Ref pVPCName
        - Key: Environment
          Value: !Ref pEnvironment
        - Key: "Template Version"
          Value: !Ref pTemplateVersion

  rVPCGatewayAttachmentInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref rInternetGateway
      VpcId: !Ref rVPC

  ###################################
  ## VPC Endpoints and Subnets Groups
  ###################################

  ## Security Group for Interface VPC Endpoint types
  rInterfaceVpcEndpointSG:
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W5
            reason: All outbound allowed from VDSS
          - id: W9
            reason: VDSS internal CIDR ranges allowed
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Interface VPC Endpoint(s)
      VpcId: !Ref rVPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref pVPCCidr
          Description: Local VPC CIDR

  # RDS subnet group
  rDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Condition: cDeployRdsSubnet
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS MySQL
      DBSubnetGroupName: RDS-DB-Subnet
      SubnetIds:
        - !Ref rSubnetPrivateA
        - !Ref rSubnetPrivateB
        - !If [3AZDeployment ,!Ref rSubnetPrivateC, !Ref "AWS::NoValue"]

  ## Redshift Subnet Groups staged for 2 created subnets
  rRedshiftClusterSubnetGroup:
    Type: AWS::Redshift::ClusterSubnetGroup
    Condition: cDeployRedShiftClusterSubnet
    Properties:
      Description: RedShift Cluster Subnet Group
      SubnetIds:
        - !Ref rSubnetPrivateA
        - !Ref rSubnetPrivateB
        - !If [3AZDeployment ,!Ref rSubnetPrivateC, !Ref "AWS::NoValue"]
      Tags:
      - Key: Name
        Value: !Sub RedShiftSubnetGroup-${pVPCName}

  ## DynamoDb Endpoint for VPC utilization
  rVPCEndpointDynamoDb:
    Type: AWS::EC2::VPCEndpoint
    Condition: cDeployDynamodbEndpoint
    Properties:
      PolicyDocument:
        Statement:
          - Action: "*"
            Effect: Allow
            Principal: "*"
            Resource: "*"
        Version: 2012-10-17
      RouteTableIds:
        - !Ref rRouteTableDmz
        - !Ref rRouteTablePrivateA
        - !Ref rRouteTablePrivateB
        - !If [3AZDeployment ,!Ref rRouteTablePrivateC, !Ref "AWS::NoValue"]
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.dynamodb"
      VpcId: !Ref rVPC

  ## S3 Endpoint for VPC utilization
  rVPCEndpointS3:
    Type: AWS::EC2::VPCEndpoint
    Condition: cDeployS3Endpoint
    Properties:
      PolicyDocument:
        Statement:
          - Action: "*"
            Effect: Allow
            Principal: "*"
            Resource: "*"
        Version: 2012-10-17
      RouteTableIds:
        - !Ref rRouteTableDmz
        - !Ref rRouteTablePrivateA
        - !Ref rRouteTablePrivateB
        - !If [3AZDeployment ,!Ref rRouteTablePrivateC, !Ref "AWS::NoValue"]
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcId: !Ref rVPC

  # CloudWatch Logs Endpoint
  rCloudWatchLogsVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: cDeployCloudWatchLogsEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref rInterfaceVpcEndpointSG
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      SubnetIds:
        - !Ref rSubnetPrivateA
        - !Ref rSubnetPrivateB
        - !If [3AZDeployment ,!Ref rSubnetPrivateC, !Ref "AWS::NoValue"]
      VpcEndpointType: Interface
      VpcId: !Ref rVPC

  ## DataSync Endpoint for VPC utilization
  rDataSyncVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: cDeployDataSyncEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref rInterfaceVpcEndpointSG
      ServiceName: !Sub com.amazonaws.${AWS::Region}.datasync
      SubnetIds:
        - !Ref rSubnetPrivateA
        - !Ref rSubnetPrivateB
        - !If [3AZDeployment ,!Ref rSubnetPrivateC, !Ref "AWS::NoValue"]
      VpcEndpointType: Interface
      VpcId: !Ref rVPC


  ## Secrets Manager Endpoint for VPC utilization
  rSecretsVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: cDeploySecretsManagerEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref rInterfaceVpcEndpointSG
      ServiceName: !Sub com.amazonaws.${AWS::Region}.secretsmanager
      SubnetIds:
        - !Ref rSubnetPrivateA
        - !Ref rSubnetPrivateB
        - !If [3AZDeployment ,!Ref rSubnetPrivateC, !Ref "AWS::NoValue"]
      VpcEndpointType: Interface
      VpcId: !Ref rVPC

  ## ECR DKR Endpoint for VPC utilization
  rEcrDkrVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: cDeployECREndpoints
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref rInterfaceVpcEndpointSG
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.dkr
      SubnetIds:
        - !Ref rSubnetPrivateA
        - !Ref rSubnetPrivateB
        - !If [3AZDeployment ,!Ref rSubnetPrivateC, !Ref "AWS::NoValue"]
      VpcEndpointType: Interface
      VpcId: !Ref rVPC

  ## ECR API Endpoint for VPC utilization
  rEcrApiVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: cDeployECREndpoints
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref rInterfaceVpcEndpointSG
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.api
      SubnetIds:
        - !Ref rSubnetPrivateA
        - !Ref rSubnetPrivateB
        - !If [3AZDeployment ,!Ref rSubnetPrivateC, !Ref "AWS::NoValue"]
      VpcEndpointType: Interface
      VpcId: !Ref rVPC

  ## API
  rApiVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: cDeployApiGatewayEndpoint
    Properties:
      SubnetIds:
        - !Ref rSubnetPrivateA
        - !Ref rSubnetPrivateB
        - !If [3AZDeployment ,!Ref rSubnetPrivateC, !Ref "AWS::NoValue"]
      SecurityGroupIds:
      - !Ref rInterfaceVpcEndpointSG
      ServiceName: !Sub com.amazonaws.${AWS::Region}.execute-api
      PrivateDnsEnabled: true
      VpcEndpointType: Interface
      VpcId: !Ref rVPC

  ## SSM Endpoints
  rSSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: cDeploySsmEndpoints
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref rInterfaceVpcEndpointSG
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      SubnetIds:
        - !Ref rSubnetPrivateA
        - !Ref rSubnetPrivateB
        - !If [3AZDeployment ,!Ref rSubnetPrivateC, !Ref "AWS::NoValue"]
      VpcEndpointType: 'Interface'
      VpcId: !Ref rVPC

  rSsmMessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: cDeploySsmEndpoints
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref rInterfaceVpcEndpointSG
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      SubnetIds:
        - !Ref rSubnetPrivateA
        - !Ref rSubnetPrivateB
        - !If [3AZDeployment ,!Ref rSubnetPrivateC, !Ref "AWS::NoValue"]
      VpcEndpointType: Interface
      VpcId: !Ref rVPC

  rEc2MessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: cDeploySsmEndpoints
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref rInterfaceVpcEndpointSG
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
      SubnetIds:
        - !Ref rSubnetPrivateA
        - !Ref rSubnetPrivateB
        - !If [3AZDeployment ,!Ref rSubnetPrivateC, !Ref "AWS::NoValue"]
      VpcEndpointType: Interface
      VpcId: !Ref rVPC

  rSsmContactsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: cDeploySsmEndpoints
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref rInterfaceVpcEndpointSG
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.sssm-contacts"
      SubnetIds:
        - !Ref rSubnetPrivateA
        - !Ref rSubnetPrivateB
        - !If [3AZDeployment ,!Ref rSubnetPrivateC, !Ref "AWS::NoValue"]
      VpcEndpointType: Interface
      VpcId: !Ref rVPC

  rSsmIncidentsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: cDeploySsmEndpoints
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref rInterfaceVpcEndpointSG
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.sssm-incidents"
      SubnetIds:
        - !Ref rSubnetPrivateA
        - !Ref rSubnetPrivateB
        - !If [3AZDeployment ,!Ref rSubnetPrivateC, !Ref "AWS::NoValue"]
      VpcEndpointType: Interface
      VpcId: !Ref rVPC

  ## AWS Backup
  rBackupEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: cDeployAwsBackupEndpoints
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref rInterfaceVpcEndpointSG
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.backup"
      SubnetIds:
        - !Ref rSubnetPrivateA
        - !Ref rSubnetPrivateB
        - !If [3AZDeployment ,!Ref rSubnetPrivateC, !Ref "AWS::NoValue"]
      VpcEndpointType: 'Interface'
      VpcId: !Ref rVPC

  rBackupGatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: cDeployAwsBackupEndpoints
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref rInterfaceVpcEndpointSG
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.backup-gateway"
      SubnetIds:
        - !Ref rSubnetPrivateA
        - !Ref rSubnetPrivateB
        - !If [3AZDeployment ,!Ref rSubnetPrivateC, !Ref "AWS::NoValue"]
      VpcEndpointType: 'Interface'
      VpcId: !Ref rVPC

  ## AWS EC2 Image Builder
  rEC2ImapgeBuilderEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: cDeployEc2ImageBuilderEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref rInterfaceVpcEndpointSG
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.imagebuilder"
      SubnetIds:
        - !Ref rSubnetPrivateA
        - !Ref rSubnetPrivateB
        - !If [3AZDeployment ,!Ref rSubnetPrivateC, !Ref "AWS::NoValue"]
      VpcEndpointType: 'Interface'
      VpcId: !Ref rVPC

  ## Amazon Aurora and RDS
  rAuroraRdsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: cDeployAuroraRdsEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref rInterfaceVpcEndpointSG
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.rds"
      SubnetIds:
        - !Ref rSubnetPrivateA
        - !Ref rSubnetPrivateB
        - !If [3AZDeployment ,!Ref rSubnetPrivateC, !Ref "AWS::NoValue"]
      VpcEndpointType: 'Interface'
      VpcId: !Ref rVPC

  ## ECS Endpoints
  rEcsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: cDeployEcsEndpoints
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref rInterfaceVpcEndpointSG
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ecs"
      SubnetIds:
        - !Ref rSubnetPrivateA
        - !Ref rSubnetPrivateB
        - !If [3AZDeployment ,!Ref rSubnetPrivateC, !Ref "AWS::NoValue"]
      VpcEndpointType: 'Interface'
      VpcId: !Ref rVPC

  rEcsAgentEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: cDeployEcsEndpoints
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref rInterfaceVpcEndpointSG
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ecs-agent"
      SubnetIds:
        - !Ref rSubnetPrivateA
        - !Ref rSubnetPrivateB
        - !If [3AZDeployment ,!Ref rSubnetPrivateC, !Ref "AWS::NoValue"]
      VpcEndpointType: 'Interface'
      VpcId: !Ref rVPC

  rEcsTelemetryEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: cDeployEcsEndpoints
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref rInterfaceVpcEndpointSG
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ecs-telemetry"
      SubnetIds:
        - !Ref rSubnetPrivateA
        - !Ref rSubnetPrivateB
        - !If [3AZDeployment ,!Ref rSubnetPrivateC, !Ref "AWS::NoValue"]
      VpcEndpointType: 'Interface'
      VpcId: !Ref rVPC

  ### EKS
  rEksEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: cDeployEksEndpoints
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref rInterfaceVpcEndpointSG
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.eks"
      SubnetIds:
        - !Ref rSubnetPrivateA
        - !Ref rSubnetPrivateB
        - !If [3AZDeployment ,!Ref rSubnetPrivateC, !Ref "AWS::NoValue"]
      VpcEndpointType: 'Interface'
      VpcId: !Ref rVPC

  ## SES
  rSesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: cDeploySesEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref rInterfaceVpcEndpointSG
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.email-smtp"
      SubnetIds:
        - !Ref rSubnetPrivateA
        - !Ref rSubnetPrivateB
        - !If [3AZDeployment ,!Ref rSubnetPrivateC, !Ref "AWS::NoValue"]
      VpcEndpointType: 'Interface'
      VpcId: !Ref rVPC

  ## SNS
  rSnsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: cDeploySnsEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref rInterfaceVpcEndpointSG
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.sns"
      SubnetIds:
        - !Ref rSubnetPrivateA
        - !Ref rSubnetPrivateB
        - !If [3AZDeployment ,!Ref rSubnetPrivateC, !Ref "AWS::NoValue"]
      VpcEndpointType: 'Interface'
      VpcId: !Ref rVPC

  ## SQS
  rSqsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: cDeploySqsEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref rInterfaceVpcEndpointSG
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.sqs"
      SubnetIds:
        - !Ref rSubnetPrivateA
        - !Ref rSubnetPrivateB
        - !If [3AZDeployment ,!Ref rSubnetPrivateC, !Ref "AWS::NoValue"]
      VpcEndpointType: 'Interface'
      VpcId: !Ref rVPC

  ## Transfer for SFTP services
  rSftpTransferEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: cDeploySftpTransferEndpoints
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref rInterfaceVpcEndpointSG
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.transfer"
      SubnetIds:
        - !Ref rSubnetPrivateA
        - !Ref rSubnetPrivateB
        - !If [3AZDeployment ,!Ref rSubnetPrivateC, !Ref "AWS::NoValue"]
      VpcEndpointType: 'Interface'
      VpcId: !Ref rVPC

  rSftpTransferServerEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: cDeploySftpTransferEndpoints
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref rInterfaceVpcEndpointSG
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.transfer.server"
      SubnetIds:
        - !Ref rSubnetPrivateA
        - !Ref rSubnetPrivateB
        - !If [3AZDeployment ,!Ref rSubnetPrivateC, !Ref "AWS::NoValue"]
      VpcEndpointType: 'Interface'
      VpcId: !Ref rVPC

  ## Secutity Token Service (STS)
  rStsEndpoint:
    Condition: cDeployStsEndpoint
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref rInterfaceVpcEndpointSG
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.sts"
      SubnetIds:
        - !Ref rSubnetPrivateA
        - !Ref rSubnetPrivateB
        - !If [3AZDeployment ,!Ref rSubnetPrivateC, !Ref "AWS::NoValue"]
      VpcEndpointType: 'Interface'
      VpcId: !Ref rVPC


Outputs:
  oRouteTableDmz:
    Value: !Ref rRouteTableDmz
  oRouteTablePrivateA:
    Value: !Ref rRouteTablePrivateA
  oRouteTablePrivateB:
    Value: !Ref rRouteTablePrivateB
  oRouteTablePrivateC:
      Value: !If [3AZDeployment ,!Ref rRouteTablePrivateC, "Unused"]
  oSubnetDMZA:
    Value: !Ref rSubnetDMZA
  oSubnetDMZB:
    Value: !Ref rSubnetDMZB
  oSubnetDMZC:
    Value: !If [3AZDeployment , !Ref rSubnetDMZC, "Unused"]
  oSubnetPrivateA:
    Value: !Ref rSubnetPrivateA
  oSubnetPrivateB:
    Value: !Ref rSubnetPrivateB
  oSubnetPrivateC:
    Value: !If [3AZDeployment , !Ref rSubnetPrivateC, "Unused"]
  oVPC:
    Value: !Ref rVPC
